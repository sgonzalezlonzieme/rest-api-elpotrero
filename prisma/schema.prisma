// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
<<<<<<< HEAD
  id        Int     @id @default(autoincrement())
  name      String @default("Catu")
  userName  String  @default("Catu123")
=======
  id        Int         @id @default(autoincrement())
  name      String      @default("Catu")
  userName  String      @default("Catu123")
>>>>>>> newPlayer
  gender    Gender?
  dni       Int         @unique @default(1234)
  birthday  String? //Fijarse el tipo de dato de Date, y hablarlo con el front.
  cellphone Int         @default(12345)
  mail      String?     @unique @default("catu@gmail.com") //Ver si es unique para el ingreso o solo por name
  image     String      @default("url")
  password  String      @default("12341234") //Fijarse en la documentaci√≥n que posibilidades hay 
  player    Player?     @relation(fields: [playerId], references: [id])
  playerId  Int?
  timetable TimeTable[]
  googleId  String?
  team      Team[]
}

model Player {
  id            Int      @id @default(autoincrement())
  position      Position
  qualification Int      @default(3)
  votes         Int      @default(1)
  available     Boolean  @default(false)
  user          User[]
  team          Team[]   @relation("Players_Teams", references: [id])
  // team          Teams_Players[]
}

model Team {
  id            Int      @id @default(autoincrement())
  name          String
  image         String?
  qualification Int      @default(3)
  votes         Int      @default(1)
  available     Boolean  @default(true)
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  player        Player[] @relation("Players_Teams", references: [id])
  // player        Teams_Players[]  //pasarlo a plural si prisma lo permite
  // game          Game[] //pasarlo a plural si prisma lo permite
}

// model Teams_Players{
//   id            Int      @id @default(autoincrement())
//   player        Player   @relation(fields: [playerId], references: [id])
//   playerId      Int
//   team          Team   @relation(fields: [teamId], references: [id])
//   teamId        Int
// }

model Field {
  id                   Int                   @id @default(autoincrement())
  name                 String
  address              String
  inicialTime          String // cambio de modelo se agrego inicialTime y endTime
  endTime              String
  cost                 Int //Ver si se puede poner con signo de peso antes del Int
  image                String
  description          String?
  timetable            TimeTable[]
  qualification        Int                   @default(3)
  votes                Int                   @default(1)
  fieldCharacteristics FieldCharacteristics?
}

model FieldCharacteristics {
  id          Int       @id @default(autoincrement())
  floorType   FloorType
  light       Boolean
  soccerField Int       @default(5)
  roofed      Boolean
  field       Field     @relation(fields: [fieldId], references: [id])
  fieldId     Int       @unique
}

model TimeTable {
  id       Int    @id @default(autoincrement())
  day      String
  hour     String
  duration Int    @default(1)
  field    Field  @relation(fields: [fieldId], references: [id])
  fieldId  Int
  // game     Game?  @relation(fields: [gameId], references: [id])
  // gameId   Int?   @unique
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
}

// model Game {
//   id        Int        @id @default(autoincrement())
//   team      Team       @relation(fields: [teamId], references: [id])
//   teamId    Int
//   timetable TimeTable?
// }

enum Position {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  ATTACKER
}

enum FloorType {
  SYNTHETIC
  GRASS
  CEMENT
}

enum Gender {
  FEMALE
  MALE
  UNDEFINED
}

// model Team_Player {
//   id Int @id @default(autoincrement())
//   player Player @relation(fields: [playerId], references: [id])
//   playerId Int
//   team Team @relation(fields: [teamId], references: [id])
//   teamId Int
//   assignedAt DateTime @default(now())
// }

// model Field_Timetable {
//   id Int @id @default(autoincrement())
//   field Field @relation(fields: [fieldId], references: [id])
//   fieldId Int
//   timetable TimeTable @relation(fields: [timetableId], references: [id])
//   timetableId Int
//   game Game[]
// }
